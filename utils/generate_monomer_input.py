import pandas as pd
import numpy as np

from utils import utils_function

# # NOTE: The maximum number of monomers was 15, but MAX_LEN was set to 16 to ensure the diversity of replicas generated by augmentation.
# MONO_MAX_LEN = 16
# MONO_PAD_ID = -1
# MONO_PAD_VAL = 0


def generate_initial_sequence_number(config, df_seq, df_mono_2D):
    """
    Generate monomer ID sequence.
    """
    SMILES_to_ID = dict(zip([utils_function.canonicalize_smiles(smi) for smi in df_mono_2D['SMILES'].to_list()], df_mono_2D['ID']))
    sequence = df_seq.filter(regex='Substructure-\d+', axis=1).values

    # Monomer ID sequence
    sequence_number = [[SMILES_to_ID[j] if j in SMILES_to_ID else config['data']['mono_pad_id'] for j in i] for i in sequence]

    # Align the part with information in the middle
    sequence_number = [[config['data']['mono_pad_id']]*int(np.trunc((config['data']['mono_max_len']-now_len)/2)) + \
                       now_seq[:now_len] + \
                       [config['data']['mono_pad_id']]*int(np.ceil((config['data']['mono_max_len']-now_len)/2)) \
                       for now_seq, now_len in zip(sequence_number, np.sum(~pd.isna(sequence), axis=1))]

    return np.array(sequence_number)




def perform_augmentation(sequence_number, MONO_MAX_LEN, MONO_PAD_ID):
    """
    Sequence-based monomer-level augmentation.
    """
    aug_sequence_number = []
    aug_sequence_length = []
    aug_peptide_ID = []

    for i in range(len(sequence_number)):
        num_now = len(np.where(sequence_number[i] !=  MONO_PAD_ID)[0])
        table_now = sequence_number[i][np.where(sequence_number[i] != MONO_PAD_ID)]

        # Rotation
        for j in range(num_now):
            # Rotate number
            table_now = list(table_now[1:]) + [table_now[0]]
            # Translation
            for k in range((MONO_MAX_LEN-num_now)+1):
                pad_start = [MONO_PAD_ID for l in range(k)]
                pad_end = [MONO_PAD_ID for l in range(MONO_MAX_LEN-num_now-k)]

                tmp_ = table_now
                tmp_ = pad_start + tmp_
                tmp_ = tmp_ + pad_end

                aug_sequence_number.append(tmp_)
                aug_sequence_length.append(num_now)
                aug_peptide_ID.append(i+1)

    # Type: list
    return aug_sequence_number, aug_sequence_length, aug_peptide_ID




def generate_feature_map(sequence_number, monomer_descriptors, MONO_PAD_VAL, MONO_PAD_ID):
    """
    Generate feature_map from sequence_number & monomer_descriptors
    """
    pad = [MONO_PAD_VAL] * monomer_descriptors.shape[1]
    feature_map = []
    for i in range(len(sequence_number)):
        feature_map_now = [pad if _ == MONO_PAD_ID else monomer_descriptors[_-1].tolist() for _ in sequence_number[i]]
        feature_map.append(feature_map_now)
    feature_map = np.array(feature_map).transpose(0,2,1)

    return feature_map




def generate_monomer_input(config, df_seq, df_mono_2D, df_mono_3D):
    """
    Generate monomer input (monomer descriptors map).
    """
    sequence_number = generate_initial_sequence_number(config, df_seq, df_mono_2D)

    # Augmentation
    aug_sequence_number, aug_sequence_length, aug_peptide_ID = perform_augmentation(sequence_number, config['data']['mono_max_len'], config['data']['mono_pad_id'])

    # Monomer descriptor types
    use_descriptors = config['descriptor']['desc_2D'] + config['descriptor']['desc_3D']





    # feature_map = generate_feature_map(sequence_number, monomer_descriptors, config['data']['mono_pad_val'], config['data']['mono_pad_id')

    # return aug_sequence_number, aug_sequence_length, aug_peptide_ID, feature_map